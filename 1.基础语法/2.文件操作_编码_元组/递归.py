                                                             #1. 必须有一个明确的结束条件
                                                             #2. 每次进入更深一层递归时，问题规模相比上次递归都应有所减少
                                                             #3. 递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）
                                                             # 这种数据结 # 构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就
                                                             # 会减一层栈帧。由于栈的# 大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）
def calc(n):
    print(n)
    if int(n/2) >0:                               #转换成整数
        return calc( int(n/2) )
    print("->",n)


calc(10)